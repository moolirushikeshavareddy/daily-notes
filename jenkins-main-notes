Class-1
------------
->it is a ci/cd tool
Ex:
->Jenkins
->gitlab
->argo cd
->buddy
->code ship
->circleci
->aws code pipeline
->aws code deploy
->semaphore
->teamcity
->GitHub actions
->travis ci
->bamboo
->bitbucket
->google cloud platform
->azure Devops

ci : continuous integration ---->continuous build + continuous test
->we are continuously building and testing the old code with new code
->before ci we have time waste and everything is manual work---->90's
->after ci everything is automated

cd : continuous delivery----->deployment manually to production environment
cd : continuous deployment-->deployment automatically to production environment

->to create ci/cd we need to create pipeline

PIPELINE:
->step by step execution of a particular process (or)
->series of events interlinked with events
code--->build--->test--->deploy

ENVIRONMENTS:
dev	: developers
qa	: testers
uat	: client
->the first three environments are called pre-prod or non-prod and for Devops team
prod	: users
->prod environment is also known as live environment

->if we want to create ci/cd pipeline we need to have Jenkins

JENKINS:
->it is a free and open-source tool
->it is platform independent
->it is build on java-11
->kohsuke kawaguchi invented jenkins in sun micro systems 2004
->initial name was Hudson---> paid version
->later oracle brought the Jenkins and made it free and open version
->it consists lot of plugins
->default port number for Jenkins is 8080

SETUP:
->create ec2 with all traffic (8000)
#STEP-1: INSTALLING GIT JAVA-1.8.0 MAVEN 
yum install git java-1.8.0-openjdk maven -y

#STEP-2: GETTING THE REPO (jenkins.io --> download -- > redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

#STEP-3: DOWNLOAD JAVA11 AND JENKINS
amazon-linux-extras install java-openjdk11 -y	or sudo yum install java-11
yum install jenkins -y
update-alternatives --config java		: to list all java versions and choose the rquired version and press enter

#STEP-4: RESTARTING JENKINS (when we download service it will on stopped state)
systemctl start jenkins.service
systemctl status jenkins.service

BROWSER:
->copy the public_ip and paste on browser like this 
->public-ip:8080

PASSWORD:
->for password —>cat /var/lib/jenkins/secrets/initialAdminPassword
->after install plugins and create user for login

INTEGRATION OF GIT AND MAVEN WITH JENKINS:
CREATE A JOB:
->New item---> name : Netflix ci job--->free style--->ok
->source code management-->select git-->github link
->build steps-->add setup--->execute shell--mvn clean package--->save

==================================================================================================================================================

class-2---scripts
-----------------
PARAMETERS:
->used to pass input for the jobs

CHOICE:
->when we have multiple options we can select any one option
->with the of choice we can pass single input
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->choice--->name: env choice ---->dev test uat prod ---> save

STRING:
->with the help of string parameter we can pass multiple inputs
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->string--->name: env and client ---->dev test uat prod ---> save

MULTI LINE STRING:
->if we want to pass the comments while building the jobs in this kind we are using multi-line-string parameters
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->multi-line-string--->name: comments ---->write comments ---> save

BOOLEAN:
->it is used for true or false
->it is used to take backup of the build or build process
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->bool--->name: build backup ---> save

FILE:
->to build files
->if you have any files in local and take that file to server, for that we use file parameter
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->file--->name: file_name ---> save

PORT CHANGE:
->if we want to change jenkins port from 8080 to any use below command
->vim /usr/lib/systemd/system/jenkins.service
->go to line number 67 where change port to any
->Environment="JENKINS_PORT=8090"
NOTE:
->when ever you change any service restart the services else the changes wont reflect

CHANGES HAVE TO DONE AFTER PORT CHANGE:
->systemctl daemon-reload
->systemctl restart jenkins.service
->systemctl status jenkins.service
->chkconfig jenkins on	: no to start jenkins again after shutdown or restart

PASSWORD:
->for password —>cat /var/lib/jenkins/secrets/initialAdminPassword
->after install plugins and create user for login

PASSWORD LESS LOGIN:
->in real time it is not acceptable 
->when ever you forgot your password use password less login
->vim /var/lib/jenkins/config.xml
->go to line number 111 and replace true with false
->Environment="JENKINS_ENABLE_ACCESS_LOG=false"

CHANGING BUILD LIMITS:
->by default Jenkins build limit is 2
->click on execute concurrent builds if necessary in Jenkins configuration 
->to extend the limits 
->go to dashboard--->go to manage Jenkins--->go to nodes--->click build-in-node--->go to configure--->change number of executors--->10---->save

HOW TO RESOLVE ISSUE WHEN JENKINS SERVER CRASHED: 
->when ever we stop and start the server your ip_address will change and the services inside the server also stop

RESTORING DELETED JOBS:
->if anyone deleted any job we won’t get it back in Jenkins by default
->if we want to get the job back we need to install a plugins called job configuration history 
PROCESS:
->go to dashboard---->click on manage Jenkins--->click on plugins--->click on available plugins--->search job configuration history--->install
->now go back to dashboard and delete the project
->now click on job config history on dashboard--->click on show delete jobs only--->restore project--->yes--->click on enable
