Class-1
------------
->it is a ci/cd tool
Ex:
->Jenkins
->gitlab
->argo cd
->buddy
->code ship
->circleci
->aws code pipeline
->aws code deploy
->semaphore
->teamcity
->GitHub actions
->travis ci
->bamboo
->bitbucket
->google cloud platform
->azure Devops

ci : continuous integration ---->continuous build + continuous test
->we are continuously building and testing the old code with new code
->before ci we have time waste and everything is manual work---->90's
->after ci everything is automated

cd : continuous delivery----->deployment manually to production environment
cd : continuous deployment-->deployment automatically to production environment

->to create ci/cd we need to create pipeline

PIPELINE:
->step by step execution of a particular process (or)
->series of events interlinked with events
code--->build--->test--->deploy

ENVIRONMENTS:
dev	: developers
qa	: testers
uat	: client
->the first three environments are called pre-prod or non-prod and for Devops team
prod	: users
->prod environment is also known as live environment

->if we want to create ci/cd pipeline we need to have Jenkins

JENKINS:
->it is a free and open-source tool
->it is platform independent
->it is build on java-11
->kohsuke kawaguchi invented jenkins in sun micro systems 2004
->initial name was Hudson---> paid version
->later oracle brought the Jenkins and made it free and open version
->it consists lot of plugins
->default port number for Jenkins is 8080

SETUP:
->create ec2 with all traffic (8000)
#STEP-1: INSTALLING GIT JAVA-1.8.0 MAVEN 
yum install git java-1.8.0-openjdk maven -y

#STEP-2: GETTING THE REPO (jenkins.io --> download -- > redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

#STEP-3: DOWNLOAD JAVA11 AND JENKINS
amazon-linux-extras install java-openjdk11 -y	or sudo yum install java-11
yum install jenkins -y
update-alternatives --config java		: to list all java versions and choose the rquired version and press enter

#STEP-4: RESTARTING JENKINS (when we download service it will on stopped state)
systemctl start jenkins.service
systemctl status jenkins.service

BROWSER:
->copy the public_ip and paste on browser like this 
->public-ip:8080

PASSWORD:
->for password —>cat /var/lib/jenkins/secrets/initialAdminPassword
->after install plugins and create user for login

INTEGRATION OF GIT AND MAVEN WITH JENKINS:
CREATE A JOB:
->New item---> name : Netflix ci job--->free style--->ok
->source code management-->select git-->github link
->build steps-->add setup--->execute shell--mvn clean package (cotent)--->save

==================================================================================================================================================

class-2---scripts
-----------------
PARAMETERS:
->used to pass input for the jobs

CHOICE:
->when we have multiple options we can select any one option
->with the of choice we can pass single input
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->choice--->name: env choice ---->dev test uat prod ---> save

STRING:
->with the help of string parameter we can pass multiple inputs
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->string--->name: env and client ---->dev test uat prod ---> save

MULTI LINE STRING:
->if we want to pass the comments while building the jobs in this kind we are using multi-line-string parameters
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->multi-line-string--->name: comments ---->write comments ---> save

BOOLEAN:
->it is used for true or false
->it is used to take backup of the build or build process
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->bool--->name: build backup ---> save

FILE:
->to build files
->if you have any files in local and take that file to server, for that we use file parameter
PROCESS:
->create a ci job--->go to configure--->select this project is parameterized--->file--->name: file_name ---> save

PORT CHANGE:
->if we want to change jenkins port from 8080 to any use below command
->vim /usr/lib/systemd/system/jenkins.service
->go to line number 67 where change port to any
->Environment="JENKINS_PORT=8090"
NOTE:
->when ever you change any service restart the services else the changes wont reflect

CHANGES HAVE TO DONE AFTER PORT CHANGE:
->systemctl daemon-reload
->systemctl restart jenkins.service
->systemctl status jenkins.service
->chkconfig jenkins on	: no to start jenkins again after shutdown or restart

PASSWORD:
->for password —>cat /var/lib/jenkins/secrets/initialAdminPassword
->after install plugins and create user for login

PASSWORD LESS LOGIN:
->in real time it is not acceptable 
->when ever you forgot your password use password less login
->vim /var/lib/jenkins/config.xml
->go to line number 111 and replace true with false
->Environment="JENKINS_ENABLE_ACCESS_LOG=false"

CHANGING BUILD LIMITS:
->by default Jenkins build limit is 2
->click on execute concurrent builds if necessary in Jenkins configuration 
->to extend the limits 
->go to dashboard--->go to manage Jenkins--->go to nodes--->click build-in-node--->go to configure--->change number of executors--->10---->save

HOW TO RESOLVE ISSUE WHEN JENKINS SERVER CRASHED: 
->when ever we stop and start the server your ip_address will change and the services inside the server also stop

RESTORING DELETED JOBS:
->if anyone deleted any job we won’t get it back in Jenkins by default
->if we want to get the job back we need to install a plugins called job configuration history 
PROCESS:
->go to dashboard---->click on manage Jenkins--->click on plugins--->click on available plugins--->search job configuration history--->install
->now go back to dashboard and delete the project
->now click on job config history on dashboard--->click on show delete jobs only--->restore project--->yes--->click on enable

==================================================================================================================================================

Class-3---cronjob
-----------------
CRON JOB:
->it is used to schedule the works on jenkins
->cron syntax is used to work with cron jobs
->cron syntax : * * * * *
->each star will have space in between them
->starting from first star to last star
->*		: minutes
->*		: hours
->*		: date
->*		: month
->*		: 0=sunday, 1=monday, 2=tuesday, 3=wednesday, 4=thursday, 5=friday, 6=saturday

# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
# │ │ │ │ │                                   OR sun, mon, tue, wed, thu, fri, sat
# │ │ │ │ │ 
# │ │ │ │ │
# *  * * *  *

ex: manually creating cronjob
today is 10.00 pm 05-03-2024------> 0 22 5 3 2
today is 10.00 am 05-03-2024------> 0 10 5 3 2
->https://crontab-generator.org---->if you dont know how to create a cronjob you can check here
NOTE:
->servers will follow UTC time zone
PROCESS:
->create a ci_job and click on configure--->click on build triggers---->click on build periodically-->give the cronjob( 0 22 5 3 2)---->save
LIMITATIONS:
->it will not check for code changed or not
->so for this we can use poll scm

POLLSCM:
->it will build when code is changed only
->it will have some time limit
NOTE: 
->need to set the time limit
PROCESS:
->create a ci_job and click on configure--->click on build triggers---->click on poll scm-->give the schedule cronjob( 0 22 5 3 2)---->save
LIMITATIONS:
->dev will change code at 7am but the poll scm is schudeled at 11am--->4 hours time waste 
->for this we can use webhooks

WEBHOOKS:
->it will trigger the build the moment we commit the code
->it doesnt have the time limit
PROCESS:
->github--->repo--->settings--->webhooks--->add webhook--->payload url: jenkins url/github-webhook/--->content url : application/json--->add webhook
->go to jenkins dashboard--->create jenkins_job--->build_triggers--->github hook trigger for gitscm polling---->save

THROTTLE BUILD:
->to restrict the number of builds per intervel
->you can restrict for the second, minute, hour, day, week, month, year
->it is mainly used to restrict the server crash with multiple builds
PROCESS:
->create job--->throttle builds--->number of build: 3--->time periods: hours--->save
->make builds and test them

REMOTE TRIGGERING:
->it is used to trigger the build remotely
PROCESS:
->create job--->build triggers--->trigger builds remotely--->authentication token: rushi(token_name)--->save
->copy thr url and change values and build it---->jenkins_url/job/job_name/build?token=TOKEN_NAME
->paste it chrome and press enter --->now you check in jenkins new build is created

==================================================================================================================================================

class-4---master-slave
---------------------
MASTER AND SLAVE:
->it is used to distribute the builds
->it reduce the load on Jenkins server
->communication between master and slave using ssh
->here we need to install agent (java-11)
->slave can use any platform
->label = way of assigning work to slave

SETUP:
Step-1:
->create a server and install java-11 (slave node)
->amazon-linux-extras install java-openjdk11 -y
->yum install git maven -y

Step-2:
->Dashboard--->manage Jenkins--->nodes--->new node--->node_name : slave1---->permanent agent---->create

CONFIGURATION OF SLAVE:
Number of executors		: 3		#number of parallel builds
Remote root directory	: /tmp		#the place where our output is stored on slave server
Labels				: slave1	#place the op in a particular slave
Usage				: last option	#any one option
Launch method		: last option	#via ssh
Host				: slave1 private ip address
Credentials--->add--->jenkins--->kind : ssh username with privately--->username : ec2-user
privatekey			: pem file of server--->save
Hotkey verification strategy: last option (no)---->save

Dashboard--->job--->configure--->restrict where this job run---->label : slave1--->save

LINKED JOBS:
->here jobs are linked with each other
->types:
	1)up stream
	2)down stream

CONFIGURATION:
->create job1
->create job2
->job1--->configuration--->post build actions--->build other projects--->name of job2--->save

==================================================================================================================================================

Class-5---jenkins-pipeline
------------------------
->step by step execution of a particular process
				or
->series of events interlinked with each other
->pipelines are syntax based
->we use groovy language to write pipeline
->it is a domain specific language (DSL)
->it gives the Visualisation of a process execution

TYPES OF PIPELINE:
1)scripted pipeline
2)declarative pipeline

CI PIPELINE:
DECLARATIVE PIPELINE:
1)SINGLE STAGE PIPELINE:
->if we are having single stage in pipelines then it is called as single stage pipeline
syntax:
pipeline {
	agent any
	#agent {
		#label 'slave1'
	#}
	stages {
		stage('abc') {
			steps {
				sh 'touch file1'
			}
		}
	}
}

NOTE: PASSS
P	: pipeline
A	: agent
S	: stages
S	: stage
S	: steps

2)MULTI-STAGE PIPELINE:
->if we have morethan one stage then it is called as multi stage pipeline
syntax:
pipeline {
	agent any
	stages {
		stage('abc') {
			steps {
				sh 'touch file1'
			}
		}
		stage('def') {
			steps {
				sh 'lscpu'
			}
		}
	}
}

code---->build---->test---->artifact---->deploy

MAVEN PIPELINE:
pipeline {
	agent any
	stages {
		stage('checkout') {		
			steps {
				git 'https://github link'
			}
		}

		stage('build') {
			steps {
				sh 'mvn compile'
			}
		}

		stage('test') {
			steps {
				sh 'mvn test'
			}
		}

		stage('artifact') {
			steps {
				sh 'mvn clean package'
			}
		}
	}
}

checkout	: checkout means getting the source code from github
sh		: sh is used to execute only linux commands


PIPELINE AS A CODE OVER SINGLE STAGE:
->ececuting multiple commands or multipule actions on a single stage

PIPELINE AS A CODE OVER SINGLE STAGE:
pipeline {
	agent any
	stages {
		stage('maven') {
			steps {
				git 'https://github link'
				sh 'mvn compile'
				sh 'mvn test'
				sh 'mvn clean package'
			}
		}
	}
}

PIPELINE AS A CODE OVER MULTIPLE STAGE:
->ececuting multiple commands or multipule actions on multiple stage
pipeline {
	agent any
	stages {
		stage('maven1') {
			steps {
				git 'https://github link'
				sh 'mvn compile'
			}
		}

		stage('maven2') {
			steps {
				sh 'mvn test'
				sh 'mvn clean package'
			}
		}
	}
}

PIPELINE AS A CODE OVER SINGLE-SHELL:
->ececuting multiple commands over a single shell
pipeline {
	agent any
	stages {
		stage('maven') {
			steps {
				git 'https://github link'
				sh '''
				mvn compile
				mvn test
				mvn clean package
				'''
			}
		}
	}
}

TO EXECUTE ON A SLAVE:
pipeline {
	agent {
		label 'slave1'
	}
	stages {
		stage('abc') {
			steps {
				sh 'touch file1'
			}
		}
	}
}

SONARQUBE:
->it is a tool used to check the code quality 
->it the bugs, vulnerabilities, code duplications, code smells
->it supports 20+ programming languages
->we have both free and paid versions
->port	: 9000
->required t2 medium at-least 2 cpus and 4gb ram
->dependancy : java-11

SETUP:
#! /bin/bash
#Launch an instance with 9000 and t2.medium
cd /opt/
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.9.6.50800.zip
unzip sonarqube-8.9.6.50800.zip
#amazon-linux-extras install java-openjdk11 -y
sudo yum install java-17
#useradd sonar
#chown sonar:sonar sonarqube-8.9.6.50800 -R
#chmod 777 sonarqube-8.9.6.50800 -R
#su - sonar

#run this on server manually
#sh /opt/sonarqube-8.9.6.50800/bin/linux/sonar.sh start
->login to sonarqube
#echo "user=admin & password=admin"

->after login--->add project--->manual--->project key--->Netflix--->setup--->token--->Netflix--->generate--->continue--->maven

Copy and paste the code on pipeline:

pipeline {
	agent any
	stages {
		stage('checkout') {		
			steps {
				git 'https://github link'
			}
		}

		stage('build') {
			steps {
				sh 'mvn compile'
			}
		}

		stage('test') {
			steps {
				sh 'mvn test'
			}
		}
		
		stage('code quality') {
			steps {
				sh '''
				mvn sonar:sonar \
				  -Dsonar.projectkey=netflix \
				  -Dsonar.host-url=http://public_ipaddress:9000 \
				  -Dsonar.login=token_key
				'''
			}
		}

		stage('artifact') {
			steps {
				sh 'mvn clean package'
			}
		}
	}
}

==================================================================================================================================================

Class-6--->variables, post build action, RBAC
---------------------------------------
VARIABLES:
->which can assign a value
->there are two types of variables
Ex:
A = 10
Where a -->variable 
	10 -->value

1)USER DEFINED VARIABLES:---static variables
->local variables	: we can define inside job
->global variables	: we can define outside job

2)JENKINS ENVIRONMENT VARIABLES:
->these variables are going to change as for build

HOW TO PASS VARIABLES ON PIPELINE:
pipeline {
	agent any
	environment {
		name = "rushi"
		loc = "bangalore"
	}

	stages {
		stage('abc') {
			steps {
				echo "this is $name living in $loc"
				sh 'env'
			}
		}
	}
}

POST BUILD ACTIONS:
->actions that we perform after build is called post build actions
->there are 3 types of post build actions
1)ALWAYS:
->if build failed or success it will run the post actions 
pipeline {
	agent any
	environment {
		name = "rushi"
		loc = "bangalore"
	}

	stages {
		stage('abc') {
			steps {
				echo "this is $name living in $loc"
				sh 'env'
			}
		}
	}
	
	post {
		always {
			echo "the build is done"
		}
	}
}

2)SUCCESS:
->it will execute post actions only when the build is successful
pipeline {
	agent any
	environment {
		name = "rushi"
		loc = "bangalore"
	}

	stages {
		stage('abc') {
			steps {
				echo "this is $name living in $loc"
				sh 'env'
			}
		}
	}
	
	post {
		success {
			echo "the build is sucess"
		}
	}
}

3)FAILURE:
->it will execute post actions only when the build is failed
pipeline {
	agent any
	environment {
		name = "rushi"
		loc = "bangalore"
	}

	stages {
		stage('abc') {
			steps {
				echo "this is $name living in $loc"
				sh 'env'
			}
		}
	}
	
	post {
		failure {
			echo "the build is failure"
		}
	}
}

RBAC: ROLE BASE ACCESS CONTROL
->this task only done by experience people
->in real time to restrict the access from jenkins console we use brace
->with brace we can give set of limited permissions for users

1)CREATE USERS:
->go to dashboard--->manage jenkins--->users--->create users (abc,def)

2)DOWNLAOD A PLUGINS:
->go to dashboard--->manage jenkins--->plugins--->available plugins--->role-based authorization strategy--->install

3)CONFIGURE:
->go to dashboard--->manage jenkins--->security--->security--->authorization--->role-based strategy--->save

4)MANAGE AND ASSIGN ROLES:
->go to dashboard--->manage jenkins--->manage and assign roles--->manage roles
Role1: fresher---read access
Role2: experience---admin access----->save--->assign roles ---->save

==================================================================================================================================================



PROJECT:
TOMCAT SETUP:
->dlcdc.apache.org/tomcat
->wget http://dlcdc.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz
->tar -zxvf apache-tomcat-9.0.80.tar.gz
->vim apache-tomcat-9.0.80/conf/tomcat-users.xml
	<tomcat>
	<role rolename="manager-gui" />
	<role rolename="manager-script" />
	user username="tomcat" password="rushi" roles="manager-gui, manager-script" />
	</tomcat>
->vim apache-tomcat-9.0.80/webapps/manager/META_INF/content.xml
	delete line number 21 and 22
->sh apache-tomcat-9.0.80/bin/startup.sh
->tomcat public_ip:8080
->manager application--->user name and password

DOWNLOAD A PLUGINS:
->go to dashboard--->manage jenkins--->plugins--->available plugins--->deploy to container--->install--->save
->this is to deploy the tomcat
->go to dashboard--->manage jenkins--->credentials--->system--->global credentials--->add credentials--->kind : username and password, scope: global(jenkins...)----->username--->password--->create
->copy the tomcat credentials ID
ex:
pipeline {
	agent any
	stages {
		stage('checkout') {		
			steps {
				git 'https://github link'
			}
		}

		stage('build') {
			steps {
				sh 'mvn compile'
			}
		}

		stage('test') {
			steps {
				sh 'mvn test'
			}
		}
		
		stage('code quality') {
			steps {
				sh '''
				mvn sonar:sonar \
					-Dsonar.projectkey=netflix \
					-Dsonar.host-url=http://public_ipaddress:9000 \
					-Dsonar.login=token_key
				'''
			}
		}
		
		stage('deploy'){
			steps{
				deploy adapters:[
					tomcat9(
						credentialsID : 'copy tomcat credentaisl ID' ,
						path : '' ,
						url : 'http://tomcatpublic_ip:8080/'
					)
				],
				contextPath : 'netflix'
				war : 'target/*.war'
			}
		}

		stage('artifact') {
			steps {
				sh 'mvn clean package'
			}
		}
	}
}

->now check on tomcat public_ip:8080 in browser you can check the netflix application in tomcat
->to check the logs
->tail -100f /root/apache-tomcat-9.0.80/logs/catalina.2024-15-03.log

CHANGE PORT IN TOMCAT:
->vim /root/apache-tomcat-9.0.80/conf/server.xml
->sh /root/apache-tomcat-9.0.80/bin/shutdown.sh
->sh /root/apache-tomcat-9.0.80/bin/startup.sh


TROUBLESHOOTING TECHNIQUES:
1)sever-level 
2)jbo-level
3)code-level

SEVER-LEVEL TROUBLESHOOTING:
->when a job fails check the 
->console output
->maven and java versions
->dependency mistake
->cpu and memory usuage

JOB_LEVEL TROUBLESHOOTING:
->repo and branch config errors
->syntax
->plugins


















